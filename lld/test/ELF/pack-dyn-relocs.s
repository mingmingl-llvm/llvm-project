// REQUIRES: aarch64

// RUN: llvm-mc -filetype=obj -triple=aarch64-unknown-linux %p/Inputs/shared2.s -o %t.a64.so.o
// RUN: ld.lld -shared %t.a64.so.o -soname=so -o %t.a64.so
// RUN: llvm-mc -filetype=obj -triple=aarch64-unknown-linux %s -o %t.a64.o
// RUN: ld.lld -pie --pack-dyn-relocs=none %t.a64.o %t.a64.so -o %t2.a64
// RUN: llvm-readobj -r %t2.a64 | FileCheck --check-prefix=UNPACKED64 %s

// UNPACKED64:          Section ({{.+}}) .rela.dyn {
// UNPACKED64-NEXT:     0x30690 R_AARCH64_RELATIVE - 0x30690
// UNPACKED64-NEXT:     0x30698 R_AARCH64_RELATIVE - 0x30691
// UNPACKED64-NEXT:     0x306A0 R_AARCH64_RELATIVE - 0x2
// UNPACKED64-NEXT:     0x306A8 R_AARCH64_RELATIVE - 0xFFFFFFFFFFFFFFFF
// UNPACKED64-NEXT:     0x306B0 R_AARCH64_RELATIVE - 0x80000000
// UNPACKED64-NEXT:     0x306B8 R_AARCH64_RELATIVE - 0x6
// UNPACKED64-NEXT:     0x306C0 R_AARCH64_RELATIVE - 0x7
// UNPACKED64-NEXT:     0x306C8 R_AARCH64_RELATIVE - 0x30698

// UNPACKED64-NEXT:     0x306D8 R_AARCH64_RELATIVE - 0x30691
// UNPACKED64-NEXT:     0x306E0 R_AARCH64_RELATIVE - 0x2
// UNPACKED64-NEXT:     0x306E8 R_AARCH64_RELATIVE - 0x3
// UNPACKED64-NEXT:     0x306F0 R_AARCH64_RELATIVE - 0x4
// UNPACKED64-NEXT:     0x306F8 R_AARCH64_RELATIVE - 0x5
// UNPACKED64-NEXT:     0x30700 R_AARCH64_RELATIVE - 0x6
// UNPACKED64-NEXT:     0x30708 R_AARCH64_RELATIVE - 0x30697

// UNPACKED64-NEXT:     0x30720 R_AARCH64_RELATIVE - 0x30691
// UNPACKED64-NEXT:     0x30728 R_AARCH64_RELATIVE - 0x2
// UNPACKED64-NEXT:     0x30730 R_AARCH64_RELATIVE - 0x3
// UNPACKED64-NEXT:     0x30738 R_AARCH64_RELATIVE - 0x4
// UNPACKED64-NEXT:     0x30740 R_AARCH64_RELATIVE - 0x5
// UNPACKED64-NEXT:     0x30748 R_AARCH64_RELATIVE - 0x6
// UNPACKED64-NEXT:     0x30750 R_AARCH64_RELATIVE - 0x7
// UNPACKED64-NEXT:     0x30758 R_AARCH64_RELATIVE - 0x8
// UNPACKED64-NEXT:     0x30760 R_AARCH64_RELATIVE - 0x30699

// UNPACKED64-NEXT:     0x30769 R_AARCH64_RELATIVE - 0x3069A

// UNPACKED64-NEXT:     0x306D0 R_AARCH64_ABS64 bar2 0x1
// UNPACKED64-NEXT:     0x30718 R_AARCH64_ABS64 bar2 0x0
// UNPACKED64-NEXT:     0x30771 R_AARCH64_ABS64 bar2 0x0
// UNPACKED64-NEXT:     0x30779 R_AARCH64_ABS64 bar2 0x0
// UNPACKED64-NEXT:     0x30781 R_AARCH64_ABS64 bar2 0x1
// UNPACKED64-NEXT:     0x30789 R_AARCH64_ABS64 bar2 0x1
// UNPACKED64-NEXT:     0x30791 R_AARCH64_ABS64 bar2 0x0
// UNPACKED64-NEXT:     0x30710 R_AARCH64_ABS64 zed2 0x0
// UNPACKED64-NEXT:     }

// RUN: ld.lld -pie --pack-dyn-relocs=android %t.a64.o %t.a64.so -o %t3.a64
// RUN: llvm-readelf -S -d -r %t3.a64 | FileCheck --check-prefix=ANDROID64 %s

// ANDROID64:      Name              Type            Address          Off    Size   ES Flg Lk Inf Al
// ANDROID64:      .dynstr           STRTAB          {{.*}}                         00   A  0   0  1
// ANDROID64-NEXT: .rela.dyn         ANDROID_RELA    {{0*}}[[#%x,ANDROID:]] {{.*}}  01   A  1   0  8
// ANDROID64-NEXT: .text             PROGBITS        {{.*}}                         00  AX  0   0  4

// ANDROID64:      (DEBUG)           0x0
// ANDROID64-NEXT: (ANDROID_RELA)    0x[[#ANDROID]]
// ANDROID64-NEXT: (ANDROID_RELASZ)  136 (bytes)
// ANDROID64-NEXT: (RELAENT)         24 (bytes)

// ANDROID64-HEADERS: 0x0000000060000011 ANDROID_RELA          [[ADDR]]
// ANDROID64-HEADERS: 0x0000000060000012 ANDROID_RELASZ        [[SIZE]]

// ANDROID64:       Relocation section '.rela.dyn' at offset {{.*}} contains 33 entries:
// ANDROID64-NEXT:      Offset             Info             Type               Symbol's Value  Symbol's Name + Addend
// ANDROID64-NEXT:  00000000000303f0  0000000000000403 R_AARCH64_RELATIVE                303f0
// ANDROID64-NEXT:  00000000000303f8  0000000000000403 R_AARCH64_RELATIVE                303f1
// ANDROID64-NEXT:  0000000000030400  0000000000000403 R_AARCH64_RELATIVE                2
// ANDROID64-NEXT:  0000000000030408  0000000000000403 R_AARCH64_RELATIVE                ffffffffffffffff
// ANDROID64-NEXT:  0000000000030410  0000000000000403 R_AARCH64_RELATIVE                80000000
// ANDROID64-NEXT:  0000000000030418  0000000000000403 R_AARCH64_RELATIVE                6
// ANDROID64-NEXT:  0000000000030420  0000000000000403 R_AARCH64_RELATIVE                7
// ANDROID64-NEXT:  0000000000030428  0000000000000403 R_AARCH64_RELATIVE                303f8
// ANDROID64-NEXT:  0000000000030480  0000000000000403 R_AARCH64_RELATIVE                303f1
// ANDROID64-NEXT:  0000000000030488  0000000000000403 R_AARCH64_RELATIVE                2
// ANDROID64-NEXT:  0000000000030490  0000000000000403 R_AARCH64_RELATIVE                3
// ANDROID64-NEXT:  0000000000030498  0000000000000403 R_AARCH64_RELATIVE                4
// ANDROID64-NEXT:  00000000000304a0  0000000000000403 R_AARCH64_RELATIVE                5
// ANDROID64-NEXT:  00000000000304a8  0000000000000403 R_AARCH64_RELATIVE                6
// ANDROID64-NEXT:  00000000000304b0  0000000000000403 R_AARCH64_RELATIVE                7
// ANDROID64-NEXT:  00000000000304b8  0000000000000403 R_AARCH64_RELATIVE                8
// ANDROID64-NEXT:  00000000000304c0  0000000000000403 R_AARCH64_RELATIVE                303f9
// ANDROID64-NEXT:  0000000000030438  0000000000000403 R_AARCH64_RELATIVE                303f1
// ANDROID64-NEXT:  0000000000030440  0000000000000403 R_AARCH64_RELATIVE                2
// ANDROID64-NEXT:  0000000000030448  0000000000000403 R_AARCH64_RELATIVE                3
// ANDROID64-NEXT:  0000000000030450  0000000000000403 R_AARCH64_RELATIVE                4
// ANDROID64-NEXT:  0000000000030458  0000000000000403 R_AARCH64_RELATIVE                5
// ANDROID64-NEXT:  0000000000030460  0000000000000403 R_AARCH64_RELATIVE                6
// ANDROID64-NEXT:  0000000000030468  0000000000000403 R_AARCH64_RELATIVE                303f7
// ANDROID64-NEXT:  00000000000304c9  0000000000000403 R_AARCH64_RELATIVE                303fa
// ANDROID64-NEXT:  0000000000030478  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 0
// ANDROID64-NEXT:  00000000000304d1  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 0
// ANDROID64-NEXT:  00000000000304d9  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 0
// ANDROID64-NEXT:  00000000000304f1  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 0
// ANDROID64-NEXT:  0000000000030430  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 1
// ANDROID64-NEXT:  0000000000030470  0000000200000101 R_AARCH64_ABS64        0000000000000000 zed2 + 0
// ANDROID64-NEXT:  00000000000304e1  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 1
// ANDROID64-NEXT:  00000000000304e9  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 1
// ANDROID64-EMPTY:

// RUN: ld.lld -pie --pack-dyn-relocs=relr %t.a64.o %t.a64.so -o %t4.a64
// RUN: llvm-readelf -Sdr -x .data %t4.a64 | FileCheck --check-prefix=RELR64 %s

// RELR64:      Name              Type            Address          Off    Size   ES Flg Lk Inf Al
// RELR64:      .dynstr           STRTAB          {{.*}}                         00   A  0   0  1
// RELR64-NEXT: .rela.dyn         RELA            {{.*}}                         18   A  1   0  8
// RELR64-NEXT: .relr.dyn         RELR            {{0*}}[[#%x,RELR:]] {{.*}}     08   A  0   0  8
// RELR64-NEXT: .text             PROGBITS        0000000000010380 000380 000000 00  AX  0   0  4

// RELR64:      (RELACOUNT)   1
// RELR64:      (RELR)        0x[[#RELR]]
// RELR64-NEXT: (RELRSZ)      16 (bytes)
// RELR64-NEXT: (RELRENT)     8 (bytes)

/// Decoded SHT_RELR section is same as UNPACKED,
/// but contains only the relative relocations.
/// Any relative relocations with odd offset stay in SHT_RELA.
// RELR64:       Relocation section '.rela.dyn' at offset {{.*}} contains 9 entries:
// RELR64-NEXT:      Offset             Info             Type               Symbol's Value  Symbol's Name + Addend
// RELR64-NEXT:  0000000000030569  0000000000000403 R_AARCH64_RELATIVE                3049a
// RELR64-NEXT:  00000000000304d0  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 1
// RELR64-NEXT:  0000000000030518  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 0
// RELR64-NEXT:  0000000000030571  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 0
// RELR64-NEXT:  0000000000030579  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 0
// RELR64-NEXT:  0000000000030581  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 1
// RELR64-NEXT:  0000000000030589  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 1
// RELR64-NEXT:  0000000000030591  0000000100000101 R_AARCH64_ABS64        0000000000000000 bar2 + 0
// RELR64-NEXT:  0000000000030510  0000000200000101 R_AARCH64_ABS64        0000000000000000 zed2 + 0
// RELR64-EMPTY: 
// RELR64-NEXT:  Relocation section '.relr.dyn' at offset {{.*}} contains 24 entries:
// RELR64-NEXT:  Symbolic Address
// RELR64-NEXT:  $d{{$}}
// RELR64-NEXT:  $d + 0x8
// RELR64-NEXT:  $d + 0x10
// RELR64-NEXT:  $d + 0x18
// RELR64-NEXT:  $d + 0x20
// RELR64-NEXT:  $d + 0x28
// RELR64-NEXT:  $d + 0x30
// RELR64-NEXT:  $d + 0x38
// RELR64-NEXT:  $d + 0x48
// RELR64-NEXT:  $d + 0x50
// RELR64-NEXT:  $d + 0x58
// RELR64-NEXT:  $d + 0x60
// RELR64-NEXT:  $d + 0x68
// RELR64-NEXT:  $d + 0x70
// RELR64-NEXT:  $d + 0x78
// RELR64-NEXT:  $d + 0x90
// RELR64-NEXT:  $d + 0x98
// RELR64-NEXT:  $d + 0xa0
// RELR64-NEXT:  $d + 0xa8
// RELR64-NEXT:  $d + 0xb0
// RELR64-NEXT:  $d + 0xb8
// RELR64-NEXT:  $d + 0xc0
// RELR64-NEXT:  $d + 0xc8
// RELR64-NEXT:  $d + 0xd0
// RELR64-EMPTY:
// RELR64-NEXT: Hex dump of section '.data':
// RELR64-NEXT: 0x00030490 90040300 00000000 91040300 00000000 .
// RELR64-NEXT: 0x000304a0 02000000 00000000 ffffffff ffffffff .
// RELR64-NEXT: 0x000304b 00000080 00000000 06000000 00000000 .

.data
.balign 2
.dc.a .data
.dc.a .data + 1
.dc.a __ehdr_start + 2
.dc.a __ehdr_start - 1
.dc.a __ehdr_start + 0x80000000
.dc.a __ehdr_start + 6
.dc.a __ehdr_start + 7
.dc.a .data + 8
.dc.a bar2 + 1

.dc.a .data + 1
.dc.a __ehdr_start + 2
.dc.a __ehdr_start + 3
.dc.a __ehdr_start + 4
.dc.a __ehdr_start + 5
.dc.a __ehdr_start + 6
.dc.a .data + 7
.dc.a zed2
.dc.a bar2

.dc.a .data + 1
.dc.a __ehdr_start + 2
.dc.a __ehdr_start + 3
.dc.a __ehdr_start + 4
.dc.a __ehdr_start + 5
.dc.a __ehdr_start + 6
.dc.a __ehdr_start + 7
.dc.a __ehdr_start + 8
.dc.a .data + 9
.byte 00
.dc.a .data + 10
.dc.a bar2
.dc.a bar2
.dc.a bar2 + 1
.dc.a bar2 + 1
.dc.a bar2
